"""Listas(list), dicion√°rios(dict) e conjuntos(set), que j√° v√™m no Python,
s√£o considerados tipos de dados? Caso negativo, justifique sua resposta.

Implementando o TAD Lista Linear com Arrays

Para seguirmos com o entendimento dessa estrutura, vamos apresentar uma
implementa√ß√£o do TAD Lista Linear usando Arrays. No caso, vamos utilizar
uma list do Python como nosso Array.

‚ö†Ô∏è Importante: O tipo list do Python n√£o √© um Array puro, pois um Array puro
somente armazena elementos de um mesmo tipo (e listas no Python n√£o tem essa
limita√ß√£o). Mas o tipo list utiliza parte da l√≥gica de Arrays e isso ser√°
suficiente para entendermos suas vantagens e desvantagens ‚ò∫Ô∏è

Devemos implementar pelo menos um jeito de recuperar e armazenar um
dado atrav√©s do √≠ndice. Para isso, vamos escrever o c√≥digo abaixo:

Nota: Lembre-se de criar e ativar o ambiente isolado.

array_example.py"""


"""Perceba que temos uma cole√ß√£o de valores
e opera√ß√µes que atuam sobre estes valores,
de acordo com o que foi definido pelo TAD."""


class ListArray:
    def __init__(self):
        self.data = []

    def __len__(self):
        # quando pedido o tamanho do array
        # retorne o tamanho de data
        return len(self.data)

    def __str__(self):
        # converte para string e exibe os valores de data
        return str(self.data)

    def get(self, index):
        # recupera o elemento no √≠ndice informado
        return self.data[index]

    def set(self, index, value):
        # insere um elemento no √≠ndice informado
        self.data.insert(index, value)


# vamos inicializar e preencher uma estrutura de dados array
array = ListArray()
array.set(0, "Felipe")
array.set(1, "Ana")
array.set(2, "Shirley")
array.set(3, "Miguel")

# para acessar um elemento do array, utilizamos seu √≠ndice
print(array.get(0))  # sa√≠da: Felipe
print(array.get(2))  # sa√≠da: Shirley
print("-----")

# podemos iterar sobre seus elementos da seguinte maneira
index = 0
# enquanto h√° elementos no array
while index < len(array):
    # recupera o elemento atrav√©s de um √≠ndice
    print("Index:", index, ", Nome:", array.get(index))
    index += 1


'''Relembrando o problema das notas, como arrays s√£o estruturas eficientes para
consultas, podemos buscar um estudante, atrav√©s de um √≠ndice, e percorrer suas
notas de uma maneira eficaz. Ainda temos o detalhe de que n√£o ocorrem tantas
inser√ß√µes de notas, somente quando um estudante entrar em recupera√ß√£o.

ü§î Mas porque n√£o ter inser√ß√µes √© uma coisa boa?

Vamos entender o que acontece quando inserimos elementos em um array.'''

'''R: Sim, as listas list, dicion√°rios dict e conjuntos set s√£o considerados
tipos de dados em Python. Na verdade, eles s√£o considerados estruturas de
dados, que s√£o implementa√ß√µes de tipos abstratos de dados (TADs) em Python.
Uma estrutura de dados √© uma forma de organizar e armazenar dados em um
programa de computador. As listas, dicion√°rios e conjuntos s√£o exemplos comuns
de estruturas de dados em Python, que permitem armazenar e manipular dados de
maneiras diferentes. Por exemplo, uma lista √© uma estrutura de dados que
permite armazenar uma sequ√™ncia ordenada de valores, acess√≠veis por √≠ndices
num√©ricos. J√° um dicion√°rio √© uma estrutura de dados que permite armazenar
pares chave-valor, onde cada valor √© acess√≠vel por sua chave correspondente.
E um conjunto √© uma estrutura de dados que permite armazenar uma cole√ß√£o de
valores √∫nicos, sem ordem espec√≠fica.'''
